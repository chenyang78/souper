#!/usr/bin/env perl

# Copyright 2014 The Souper Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

use warnings;
use strict;
use Redis;
use Getopt::Long;
use File::Temp;
use Time::HiRes;

eval { require Sys::CPU; Sys::CPU->import(); };

my $NPROCS = 4;
$NPROCS = Sys::CPU::cpu_count() if defined(&Sys::CPU::cpu_count);

sub usage() {
    print <<"END";
Options:
  -n           number of CPUs to use (default=$NPROCS)
END
    exit -1;
}

GetOptions(
    "n=i" => \$NPROCS,
    ) or usage();

my $need_solver = <<END;
$0 requires the SOUPER_SOLVER environment variable to be defined, e.g. as
-stp-path=/path/to/stp
END
my $solver = $ENV{"SOUPER_SOLVER"};
die $need_solver unless $solver;

my $check = "@CMAKE_BINARY_DIR@/souper-check -solver-timeout=15 ${solver}";

sub runit ($) {
    my $cmd = shift;
    my $res = (system "$cmd");
    return $? >> 8;
}

my $r = Redis->new();
$r->ping || die "no server?";
my @keys = $r->keys('*');

sub infer($) {
    (my $k) = @_;
    (my $fh, my $tmpfn) = File::Temp::tempfile();
    print $fh $k;
    $fh->flush();
    open INF, "${check} -infer-rhs -souper-external-cache < $tmpfn |";
    my $ok = 0;
    my $output = "";
    while (my $line = <INF>) {
        exit 1 if ($line =~ /Failed/);
        if ($line =~ /successfully/) {
            $ok = 1;
            next;
        }
        $output .= $line;
    }
    exit 1 unless $ok;
    exit 0;
}

my $num_running = 0;
my $good = 0;
my $fail = 0;

sub wait_for_one() {
    my $xpid = wait();
    die if $xpid == -1;
    $num_running--;
    my $result = $? >> 8;
    if ($result == 0) {
        $good++;
    } else {
        $fail++;
    }
}

my $opid = $$;

foreach my $k (@keys) {
    wait_for_one() unless $num_running < $NPROCS;
    die unless $num_running < $NPROCS;
    my $pid = fork();
    die unless $pid >= 0;
    infer ($k) if $pid == 0;
    # make sure we're in the parent
    die unless $$ == $opid;
    $num_running++;
}

wait_for_one() while ($num_running > 0);

print "$good optimizations\n";
print "$fail not-optimizations\n";
